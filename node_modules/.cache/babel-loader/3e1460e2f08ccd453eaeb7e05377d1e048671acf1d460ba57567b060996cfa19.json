{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._headers = headers;\n    this._baseUrl = baseUrl;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    // если ошибка, отклоняем промис\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  changeUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(data)\n    }).then(this._checkResponse);\n  }\n  addNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(data)\n    }).then(this._checkResponse);\n  }\n  deleteCard(cardid) {\n    return fetch(`${this._baseUrl}/cards/${cardid}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  // deleteLike(cardid) {\n  //     return fetch(`${this._baseUrl}/cards/${cardid}/likes`, {\n  //         method: 'DELETE',\n  //         headers: this._headers\n  //     })\n  //         .then(this._checkResponse)\n  // }\n\n  // addLike(cardid) {\n  //     return fetch(`${this._baseUrl}/cards/${cardid}/likes`, {\n  //         method: 'PUT',\n  //         headers: this._headers\n  //     })\n  //         .then(this._checkResponse)\n  // }\n\n  changeLike(cardId, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(this._checkResponse);\n    } else {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(this._checkResponse);\n    }\n  }\n  changeAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-64',\n  headers: {\n    authorization: '141f19a7-2a64-4734-9dd2-fa8ceaaaa66b',\n    'Content-Type': 'application/json'\n  }\n});\nexport { api };","map":{"version":3,"names":["Api","constructor","_ref","baseUrl","headers","_headers","_baseUrl","_checkResponse","res","ok","json","Promise","reject","status","getInfo","fetch","method","then","getInitialCards","changeUserInfo","data","body","JSON","stringify","addNewCard","deleteCard","cardid","changeLike","cardId","isLiked","changeAvatar","avatar","api","authorization"],"sources":["/Users/admin/ya-projects/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor ({ baseUrl, headers }) {\n    this._headers = headers\n    this._baseUrl = baseUrl\n  }\n\n  _checkResponse (res) {\n    if (res.ok) {\n      return res.json()\n    }\n    // если ошибка, отклоняем промис\n    return Promise.reject(`Ошибка: ${res.status}`)\n  }\n\n  getInfo () {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse)\n  }\n\n  getInitialCards () {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse)\n  }\n\n  changeUserInfo (data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(data)\n    }).then(this._checkResponse)\n  }\n\n  addNewCard (data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(data)\n    }).then(this._checkResponse)\n  }\n\n  deleteCard (cardid) {\n    return fetch(`${this._baseUrl}/cards/${cardid}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse)\n  }\n\n  // deleteLike(cardid) {\n  //     return fetch(`${this._baseUrl}/cards/${cardid}/likes`, {\n  //         method: 'DELETE',\n  //         headers: this._headers\n  //     })\n  //         .then(this._checkResponse)\n  // }\n\n  // addLike(cardid) {\n  //     return fetch(`${this._baseUrl}/cards/${cardid}/likes`, {\n  //         method: 'PUT',\n  //         headers: this._headers\n  //     })\n  //         .then(this._checkResponse)\n  // }\n\n  changeLike (cardId, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(this._checkResponse)\n    } else {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(this._checkResponse)\n    }\n  }\n\n  changeAvatar (data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse)\n  }\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-64',\n  headers: {\n    authorization: '141f19a7-2a64-4734-9dd2-fa8ceaaaa66b',\n    'Content-Type': 'application/json'\n  }\n})\n\nexport { api }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}