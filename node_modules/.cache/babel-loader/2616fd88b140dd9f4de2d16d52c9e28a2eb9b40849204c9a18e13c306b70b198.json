{"ast":null,"code":"// export const BASE_URL = 'https://api.nomoreparties.co';\n\n// export const register = (data) => {\n//     return fetch(`${BASE_URL}/signup`, {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(data),\n//     })\n//       .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n//   };\n\n//   export const login = (data) => {\n//     return fetch(`${BASE_URL}/signin`, {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(data),\n//     })\n//     .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n//   };\n\n//   export const checkToken = (jwt) => {\n//     return fetch(`${BASE_URL}/users/me`, {\n//       method: 'GET',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${jwt}`,\n//       },\n//     })\n//     .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n//   };\n\nclass Auth {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n  }\n  _getResponseData(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  /** универсальный метод запрос с проверкой  */\n  _request(path, method, data) {\n    let body = data;\n    if ((method === 'PATCH' || method === 'POST') && data) {\n      body = JSON.stringify(data);\n    }\n    return fetch(this._url + path, {\n      method,\n      headers: this._headers,\n      body\n    }).then(this._getResponseData);\n  }\n  register(data) {\n    return this._request(`/signup`, 'POST', data); /** signup - регистрация */\n  }\n\n  login(data) {\n    return this._request(`/signin`, 'POST', data); /** signin - авторизация */\n  }\n\n  /** проверем токен */\n  checkToken(jwt) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: {\n        ...this._headers,\n        Authorization: `Bearer ${jwt}`\n      }\n    }).then(this._getResponseData);\n  }\n}\nconst auth = new Auth({\n  url: 'https://auth.nomoreparties.co',\n  /** базовый url */\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport { auth };","map":{"version":3,"names":["Auth","constructor","config","_url","url","_headers","headers","_getResponseData","res","ok","json","Promise","reject","status","_request","path","method","data","body","JSON","stringify","fetch","then","register","login","checkToken","jwt","Authorization","auth"],"sources":["/Users/admin/ya-projects/react-mesto-auth/src/utils/Auth.js"],"sourcesContent":["// export const BASE_URL = 'https://api.nomoreparties.co';\n\n// export const register = (data) => {\n//     return fetch(`${BASE_URL}/signup`, {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(data),\n//     })\n//       .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n//   };\n\n//   export const login = (data) => {\n//     return fetch(`${BASE_URL}/signin`, {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(data),\n//     })\n//     .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n//   };\n\n//   export const checkToken = (jwt) => {\n//     return fetch(`${BASE_URL}/users/me`, {\n//       method: 'GET',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${jwt}`,\n//       },\n//     })\n//     .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n//   };\n\n\nclass Auth {\n    constructor(config) {\n      this._url = config.url;\n      this._headers = config.headers;\n    }\n\n    _getResponseData(res) {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    /** универсальный метод запрос с проверкой  */\n    _request(path, method, data) {\n      let body = data;\n      if ((method === 'PATCH' || method === 'POST') && data) {\n        body = JSON.stringify(data);\n      }\n      return fetch(this._url + path, {\n        method,\n        headers: this._headers,\n        body,\n      })\n      .then(this._getResponseData);\n    }\n\n    register(data) {\n      return this._request(`/signup`, 'POST', data); /** signup - регистрация */\n    }\n\n    login(data) {\n      return this._request(`/signin`, 'POST', data); /** signin - авторизация */\n    }\n\n    /** проверем токен */\n    checkToken(jwt) {\n      return fetch(`${this._url}/users/me`, {\n        method: 'GET',\n        headers: {\n          ...this._headers,\n          Authorization: `Bearer ${jwt}`,\n        },\n      }).then(this._getResponseData);\n    }\n  }\n\n  const auth = new Auth({\n    url: 'https://auth.nomoreparties.co', /** базовый url */\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  export { auth };\n\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMA,IAAI,CAAC;EACPC,WAAWA,CAACC,MAAM,EAAE;IAClB,IAAI,CAACC,IAAI,GAAGD,MAAM,CAACE,GAAG;IACtB,IAAI,CAACC,QAAQ,GAAGH,MAAM,CAACI,OAAO;EAChC;EAEAC,gBAAgBA,CAACC,GAAG,EAAE;IACpB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACnB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAChD;;EAEA;EACAC,QAAQA,CAACC,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAE;IAC3B,IAAIC,IAAI,GAAGD,IAAI;IACf,IAAI,CAACD,MAAM,KAAK,OAAO,IAAIA,MAAM,KAAK,MAAM,KAAKC,IAAI,EAAE;MACrDC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;IAC7B;IACA,OAAOI,KAAK,CAAC,IAAI,CAAClB,IAAI,GAAGY,IAAI,EAAE;MAC7BC,MAAM;MACNV,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBa;IACF,CAAC,CAAC,CACDI,IAAI,CAAC,IAAI,CAACf,gBAAgB,CAAC;EAC9B;EAEAgB,QAAQA,CAACN,IAAI,EAAE;IACb,OAAO,IAAI,CAACH,QAAQ,CAAE,SAAQ,EAAE,MAAM,EAAEG,IAAI,CAAC,CAAC,CAAC;EACjD;;EAEAO,KAAKA,CAACP,IAAI,EAAE;IACV,OAAO,IAAI,CAACH,QAAQ,CAAE,SAAQ,EAAE,MAAM,EAAEG,IAAI,CAAC,CAAC,CAAC;EACjD;;EAEA;EACAQ,UAAUA,CAACC,GAAG,EAAE;IACd,OAAOL,KAAK,CAAE,GAAE,IAAI,CAAClB,IAAK,WAAU,EAAE;MACpCa,MAAM,EAAE,KAAK;MACbV,OAAO,EAAE;QACP,GAAG,IAAI,CAACD,QAAQ;QAChBsB,aAAa,EAAG,UAASD,GAAI;MAC/B;IACF,CAAC,CAAC,CAACJ,IAAI,CAAC,IAAI,CAACf,gBAAgB,CAAC;EAChC;AACF;AAEA,MAAMqB,IAAI,GAAG,IAAI5B,IAAI,CAAC;EACpBI,GAAG,EAAE,+BAA+B;EAAE;EACtCE,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,SAASsB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}