{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._headers = headers;\n    this._baseUrl = baseUrl;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    // если ошибка, отклоняем промис\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getInfo() {\n    // console.log('getProfile')\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    })\n    // .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`))\n    // .catch(console.log)\n    .then(this._checkResponse);\n  }\n  getInitialCards() {\n    // console.log('getProfile')\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    })\n    // .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`))\n    // .catch(console.log)\n    .then(this._checkResponse);\n  }\n  changeUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n        // name: 'Marie Skłodowska Curie',\n        // about: 'Physicist and Chemist'\n      })\n    }).then(this._checkResponse);\n  }\n  addNewCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._checkResponse);\n  }\n  deleteCard(cardid) {\n    return fetch(`${this._baseUrl}/cards/${cardid}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  // deleteLike(cardid) {\n  //     return fetch(`${this._baseUrl}/cards/${cardid}/likes`, {\n  //         method: 'DELETE',\n  //         headers: this._headers\n  //     })\n  //         .then(this._checkResponse)\n  // }\n\n  // addLike(cardid) {\n  //     return fetch(`${this._baseUrl}/cards/${cardid}/likes`, {\n  //         method: 'PUT',\n  //         headers: this._headers\n  //     })\n  //         .then(this._checkResponse)\n  // }\n\n  changeLike(cardId, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(this._checkResponse);\n    } else {\n      return fetch(`${this._baseUrl}/cards/${cardid}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(this._checkResponse);\n    }\n  }\n  changeAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-64',\n  headers: {\n    authorization: '141f19a7-2a64-4734-9dd2-fa8ceaaaa66b',\n    'Content-Type': 'application/json'\n  }\n});\nexport { api };","map":{"version":3,"names":["Api","constructor","_ref","baseUrl","headers","_headers","_baseUrl","_checkResponse","res","ok","json","Promise","reject","status","getInfo","fetch","method","then","getInitialCards","changeUserInfo","data","body","JSON","stringify","name","about","addNewCard","link","deleteCard","cardid","changeLike","cardId","isLiked","changeAvatar","avatar","api","authorization"],"sources":["/Users/admin/ya-projects/mesto-react/src/utils/Api.js"],"sourcesContent":["\n\nclass Api {\n    constructor({ baseUrl, headers }) {\n        this._headers = headers;\n        this._baseUrl = baseUrl;\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        // если ошибка, отклоняем промис\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    getInfo() {\n        // console.log('getProfile')\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'GET',\n            headers: this._headers\n        })\n            // .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`))\n            // .catch(console.log)\n            .then(this._checkResponse)\n    }\n\n    getInitialCards() {\n        // console.log('getProfile')\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'GET',\n            headers: this._headers\n        })\n            // .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`))\n            // .catch(console.log)\n            .then(this._checkResponse)\n    }\n\n    changeUserInfo(data) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                about: data.about\n                // name: 'Marie Skłodowska Curie',\n                // about: 'Physicist and Chemist'\n            })\n        })\n            .then(this._checkResponse)\n    }\n\n    addNewCard(name, link) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name,\n                link\n            })\n        })\n            .then(this._checkResponse)\n    }\n\n    deleteCard(cardid) {\n        return fetch(`${this._baseUrl}/cards/${cardid}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n            .then(this._checkResponse)\n    }\n\n    // deleteLike(cardid) {\n    //     return fetch(`${this._baseUrl}/cards/${cardid}/likes`, {\n    //         method: 'DELETE',\n    //         headers: this._headers\n    //     })\n    //         .then(this._checkResponse)\n    // }\n\n    // addLike(cardid) {\n    //     return fetch(`${this._baseUrl}/cards/${cardid}/likes`, {\n    //         method: 'PUT',\n    //         headers: this._headers\n    //     })\n    //         .then(this._checkResponse)\n    // }\n\n    changeLike(cardId, isLiked) {\n        if (isLiked) {\n            return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n                method: 'DELETE',\n                headers: this._headers\n            })\n                .then(this._checkResponse)\n            }\n              else {\n                return fetch(`${this._baseUrl}/cards/${cardid}/likes`, {\n                    method: 'PUT',\n                    headers: this._headers\n                })\n                    .then(this._checkResponse)\n              }\n        }\n\n    changeAvatar(data) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: data.avatar\n            }),\n        })\n            .then(this._checkResponse)\n    }\n}\n\n\nconst api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-64',\n    headers: {\n        authorization: '141f19a7-2a64-4734-9dd2-fa8ceaaaa66b',\n        'Content-Type': 'application/json'\n    }\n});\n\nexport { api };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}