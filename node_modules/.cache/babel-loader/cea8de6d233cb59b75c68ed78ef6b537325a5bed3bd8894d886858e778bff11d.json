{"ast":null,"code":"export const BASE_URL = 'https://api.nomoreparties.co';\nexport const register = data => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n};\nexport const login = data => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n};\nexport const checkToken = jwt => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${jwt}`\n    }\n  }).then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n};\n\n// class Auth {\n//     constructor(config) {\n//       this._url = config.url;\n//       this._headers = config.headers;\n//     }\n\n//     _getResponseData(res) {\n//       if (res.ok) {\n//         return res.json();\n//       }\n//       return Promise.reject(`Ошибка: ${res.status}`);\n//     }\n\n//     /** универсальный метод запрос с проверкой  */\n//     _request(path, method, data) {\n//       let body = data;\n//       if ((method === 'PATCH' || method === 'POST') && data) {\n//         body = JSON.stringify(data);\n//       }\n//       return fetch(this._url + path, {\n//         method,\n//         headers: this._headers,\n//         body,\n//       })\n//       .then(this._getResponseData);\n//     }\n\n//     register(data) {\n//       return this._request(`/signup`, 'POST', data); /** signup - регистрация */\n//     }\n\n//     login(data) {\n//       return this._request(`/signin`, 'POST', data); /** signin - авторизация */\n//     }\n\n//     /** проверем токен */\n//     checkToken(jwt) {\n//       return fetch(`${this._url}/users/me`, {\n//         method: 'GET',\n//         headers: {\n//           ...this._headers,\n//           Authorization: `Bearer ${jwt}`,\n//         },\n//       }).then(this._getResponseData);\n//     }\n//   }\n\n//   const auth = new Auth({\n//     url: 'https://auth.nomoreparties.co', /** базовый url */\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n\n//   export { auth };","map":{"version":3,"names":["BASE_URL","register","data","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","status","login","checkToken","jwt"],"sources":["/Users/admin/ya-projects/react-mesto-auth/src/utils/Auth.js"],"sourcesContent":["export const BASE_URL = 'https://api.nomoreparties.co';\n\nexport const register = (data) => {\n    return fetch(`${BASE_URL}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n  };\n\n  export const login = (data) => {\n    return fetch(`${BASE_URL}/signin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n    .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n  };\n\n  export const checkToken = (jwt) => {\n    return fetch(`${BASE_URL}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`,\n      },\n    })\n    .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n  };\n\n\n// class Auth {\n//     constructor(config) {\n//       this._url = config.url;\n//       this._headers = config.headers;\n//     }\n\n//     _getResponseData(res) {\n//       if (res.ok) {\n//         return res.json();\n//       }\n//       return Promise.reject(`Ошибка: ${res.status}`);\n//     }\n\n//     /** универсальный метод запрос с проверкой  */\n//     _request(path, method, data) {\n//       let body = data;\n//       if ((method === 'PATCH' || method === 'POST') && data) {\n//         body = JSON.stringify(data);\n//       }\n//       return fetch(this._url + path, {\n//         method,\n//         headers: this._headers,\n//         body,\n//       })\n//       .then(this._getResponseData);\n//     }\n\n//     register(data) {\n//       return this._request(`/signup`, 'POST', data); /** signup - регистрация */\n//     }\n\n//     login(data) {\n//       return this._request(`/signin`, 'POST', data); /** signin - авторизация */\n//     }\n\n//     /** проверем токен */\n//     checkToken(jwt) {\n//       return fetch(`${this._url}/users/me`, {\n//         method: 'GET',\n//         headers: {\n//           ...this._headers,\n//           Authorization: `Bearer ${jwt}`,\n//         },\n//       }).then(this._getResponseData);\n//     }\n//   }\n\n//   const auth = new Auth({\n//     url: 'https://auth.nomoreparties.co', /** базовый url */\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n\n//   export { auth };\n\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,8BAA8B;AAEtD,OAAO,MAAMC,QAAQ,GAAIC,IAAI,IAAK;EAC9B,OAAOC,KAAK,CAAE,GAAEH,QAAS,SAAQ,EAAE;IACjCI,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI;EAC3B,CAAC,CAAC,CACCO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC,CAAC;AAC/E,CAAC;AAED,OAAO,MAAMC,KAAK,GAAId,IAAI,IAAK;EAC7B,OAAOC,KAAK,CAAE,GAAEH,QAAS,SAAQ,EAAE;IACjCI,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI;EAC3B,CAAC,CAAC,CACDO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC,CAAC;AAC7E,CAAC;AAED,OAAO,MAAME,UAAU,GAAIC,GAAG,IAAK;EACjC,OAAOf,KAAK,CAAE,GAAEH,QAAS,WAAU,EAAE;IACnCI,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAASa,GAAI;IACjC;EACF,CAAC,CAAC,CACDT,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC,CAAC;AAC7E,CAAC;;AAGH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}